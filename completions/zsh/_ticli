#compdef ticli

autoload -U is-at-least

_ticli() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-h+[TiKV PD server hostname]:HOST:_hosts' \
'--host=[TiKV PD server hostname]:HOST:_hosts' \
'-p+[TiKV PD server port]:PORT: ' \
'--port=[TiKV PD server port]:PORT: ' \
'-m+[TiKV API mode]:MODE:(txn raw)' \
'--mode=[TiKV API mode]:MODE:(txn raw)' \
'-s+[Specify the output table style]:STYLE:(modern sharp rounded bare ascii psql text markdown)' \
'--style=[Specify the output table style]:STYLE:(modern sharp rounded bare ascii psql text markdown)' \
'--help[Print help information]' \
'-V[Print version information]' \
'--version[Print version information]' \
":: :_ticli_commands" \
"*::: :->ticli" \
&& ret=0
    case $state in
    (ticli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ticli-command-$line[1]:"
        case $line[1] in
            (get)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key:' \
&& ret=0
;;
(getb)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key:' \
&& ret=0
;;
(set)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key:' \
':value -- Value string to set:' \
&& ret=0
;;
(setb)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key:' \
'::FILE -- Binary file to set (ignore to read from standard input):_files' \
&& ret=0
;;
(incr)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key:' \
&& ret=0
;;
(decr)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key:' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key:' \
&& ret=0
;;
(strlen)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key:' \
&& ret=0
;;
(exists)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
':key:' \
&& ret=0
;;
(scan)
_arguments "${_arguments_options[@]}" \
'--from=[Start Key prefix (included)]:FROM: ' \
'--to=[End Key prefix (included)]:TO: ' \
'-l+[Limit the number of records to scan]:LIMIT: ' \
'--limit=[Limit the number of records to scan]:LIMIT: ' \
'-o+[Output format]:OUTPUT:(auto table json csv)' \
'--output=[Output format]:OUTPUT:(auto table json csv)' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(count)
_arguments "${_arguments_options[@]}" \
'--from=[Start Key prefix (included)]:FROM: ' \
'--to=[End Key prefix (included)]:TO: ' \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(source)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::FILE -- File to source (ignore to read from standard input):_files' \
&& ret=0
;;
(loadcsv)
_arguments "${_arguments_options[@]}" \
'-d+[Specify the field delimiter]:DELIMITER: ' \
'--delimiter=[Specify the field delimiter]:DELIMITER: ' \
'-b+[Specify how many records to write at once]:BATCH: ' \
'--batch=[Specify how many records to write at once]:BATCH: ' \
'-h[Specify that the input has header row]' \
'--header[Specify that the input has header row]' \
'--help[Print help information]' \
'::FILE -- File to load (ignore to read from standard input):_files' \
&& ret=0
;;
(flushall)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(ping)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(quit)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(style)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
'::style:(modern sharp rounded bare ascii psql text markdown)' \
&& ret=0
;;
(noop)
_arguments "${_arguments_options[@]}" \
'-h[Print help information]' \
'--help[Print help information]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
'*::subcommand -- The subcommand whose help message to display:' \
&& ret=0
;;
        esac
    ;;
esac
}

(( $+functions[_ticli_commands] )) ||
_ticli_commands() {
    local commands; commands=(
'get:Get the value of key' \
'getb:Get the value of key in binary format' \
'set:Set key to hold the string value' \
'setb:Set key to hold the binary data from the file' \
'incr:Increments the number stored at key by one' \
'decr:Decrements the number stored at key by one' \
'delete:Delete the specified key' \
'del:Delete the specified key' \
'strlen:Get the length of the bytes stored at key' \
'exists:Returns if key exists' \
'scan:Scan keys between the range' \
'count:Count keys between the range' \
'cnt:Count keys between the range' \
'source:Execute commands from file' \
'loadcsv:Load kv records from csv file' \
'flushall:Remove all keys from tikv' \
'ping:Return pong when connection is alive' \
'quit:Exit the program' \
'exit:Exit the program' \
'style:Specify the output table style' \
'noop:No Operation' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ticli commands' commands "$@"
}
(( $+functions[_ticli__count_commands] )) ||
_ticli__count_commands() {
    local commands; commands=()
    _describe -t commands 'ticli count commands' commands "$@"
}
(( $+functions[_ticli__decr_commands] )) ||
_ticli__decr_commands() {
    local commands; commands=()
    _describe -t commands 'ticli decr commands' commands "$@"
}
(( $+functions[_ticli__delete_commands] )) ||
_ticli__delete_commands() {
    local commands; commands=()
    _describe -t commands 'ticli delete commands' commands "$@"
}
(( $+functions[_ticli__exists_commands] )) ||
_ticli__exists_commands() {
    local commands; commands=()
    _describe -t commands 'ticli exists commands' commands "$@"
}
(( $+functions[_ticli__flushall_commands] )) ||
_ticli__flushall_commands() {
    local commands; commands=()
    _describe -t commands 'ticli flushall commands' commands "$@"
}
(( $+functions[_ticli__get_commands] )) ||
_ticli__get_commands() {
    local commands; commands=()
    _describe -t commands 'ticli get commands' commands "$@"
}
(( $+functions[_ticli__getb_commands] )) ||
_ticli__getb_commands() {
    local commands; commands=()
    _describe -t commands 'ticli getb commands' commands "$@"
}
(( $+functions[_ticli__help_commands] )) ||
_ticli__help_commands() {
    local commands; commands=()
    _describe -t commands 'ticli help commands' commands "$@"
}
(( $+functions[_ticli__incr_commands] )) ||
_ticli__incr_commands() {
    local commands; commands=()
    _describe -t commands 'ticli incr commands' commands "$@"
}
(( $+functions[_ticli__loadcsv_commands] )) ||
_ticli__loadcsv_commands() {
    local commands; commands=()
    _describe -t commands 'ticli loadcsv commands' commands "$@"
}
(( $+functions[_ticli__noop_commands] )) ||
_ticli__noop_commands() {
    local commands; commands=()
    _describe -t commands 'ticli noop commands' commands "$@"
}
(( $+functions[_ticli__ping_commands] )) ||
_ticli__ping_commands() {
    local commands; commands=()
    _describe -t commands 'ticli ping commands' commands "$@"
}
(( $+functions[_ticli__quit_commands] )) ||
_ticli__quit_commands() {
    local commands; commands=()
    _describe -t commands 'ticli quit commands' commands "$@"
}
(( $+functions[_ticli__scan_commands] )) ||
_ticli__scan_commands() {
    local commands; commands=()
    _describe -t commands 'ticli scan commands' commands "$@"
}
(( $+functions[_ticli__set_commands] )) ||
_ticli__set_commands() {
    local commands; commands=()
    _describe -t commands 'ticli set commands' commands "$@"
}
(( $+functions[_ticli__setb_commands] )) ||
_ticli__setb_commands() {
    local commands; commands=()
    _describe -t commands 'ticli setb commands' commands "$@"
}
(( $+functions[_ticli__source_commands] )) ||
_ticli__source_commands() {
    local commands; commands=()
    _describe -t commands 'ticli source commands' commands "$@"
}
(( $+functions[_ticli__strlen_commands] )) ||
_ticli__strlen_commands() {
    local commands; commands=()
    _describe -t commands 'ticli strlen commands' commands "$@"
}
(( $+functions[_ticli__style_commands] )) ||
_ticli__style_commands() {
    local commands; commands=()
    _describe -t commands 'ticli style commands' commands "$@"
}

_ticli "$@"
